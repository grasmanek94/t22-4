//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ITTF_TrainStation.TrafficMessage {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="MessageService", ConfigurationName="TrafficMessage.ITrafficMessage")]
    public interface ITrafficMessage {
        
        [System.ServiceModel.OperationContractAttribute(Action="MessageService/ITrafficMessage/ConnectMe", ReplyAction="MessageService/ITrafficMessage/ConnectMeResponse")]
        System.Net.IPEndPoint ConnectMe(ITTF_Server.ObjectType myType, string myName);
        
        [System.ServiceModel.OperationContractAttribute(Action="MessageService/ITrafficMessage/ConnectMe", ReplyAction="MessageService/ITrafficMessage/ConnectMeResponse")]
        System.Threading.Tasks.Task<System.Net.IPEndPoint> ConnectMeAsync(ITTF_Server.ObjectType myType, string myName);
        
        [System.ServiceModel.OperationContractAttribute(Action="MessageService/ITrafficMessage/GetID", ReplyAction="MessageService/ITrafficMessage/GetIDResponse")]
        System.Net.IPEndPoint GetID(ITTF_Server.ObjectType type, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="MessageService/ITrafficMessage/GetID", ReplyAction="MessageService/ITrafficMessage/GetIDResponse")]
        System.Threading.Tasks.Task<System.Net.IPEndPoint> GetIDAsync(ITTF_Server.ObjectType type, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="MessageService/ITrafficMessage/SendMessage", ReplyAction="MessageService/ITrafficMessage/SendMessageResponse")]
        bool SendMessage(ITTF_Server.ServerMessage message);
        
        [System.ServiceModel.OperationContractAttribute(Action="MessageService/ITrafficMessage/SendMessage", ReplyAction="MessageService/ITrafficMessage/SendMessageResponse")]
        System.Threading.Tasks.Task<bool> SendMessageAsync(ITTF_Server.ServerMessage message);
        
        [System.ServiceModel.OperationContractAttribute(Action="MessageService/ITrafficMessage/RetrieveMessage", ReplyAction="MessageService/ITrafficMessage/RetrieveMessageResponse")]
        ITTF_TrainStation.TrafficMessage.RetrieveMessageResponse RetrieveMessage(ITTF_TrainStation.TrafficMessage.RetrieveMessageRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="MessageService/ITrafficMessage/RetrieveMessage", ReplyAction="MessageService/ITrafficMessage/RetrieveMessageResponse")]
        System.Threading.Tasks.Task<ITTF_TrainStation.TrafficMessage.RetrieveMessageResponse> RetrieveMessageAsync(ITTF_TrainStation.TrafficMessage.RetrieveMessageRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="MessageService/ITrafficMessage/RetrieveAllMessages", ReplyAction="MessageService/ITrafficMessage/RetrieveAllMessagesResponse")]
        ITTF_TrainStation.TrafficMessage.RetrieveAllMessagesResponse RetrieveAllMessages(ITTF_TrainStation.TrafficMessage.RetrieveAllMessagesRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="MessageService/ITrafficMessage/RetrieveAllMessages", ReplyAction="MessageService/ITrafficMessage/RetrieveAllMessagesResponse")]
        System.Threading.Tasks.Task<ITTF_TrainStation.TrafficMessage.RetrieveAllMessagesResponse> RetrieveAllMessagesAsync(ITTF_TrainStation.TrafficMessage.RetrieveAllMessagesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="MessageService/ITrafficMessage/MessagesAvailable", ReplyAction="MessageService/ITrafficMessage/MessagesAvailableResponse")]
        int MessagesAvailable();
        
        [System.ServiceModel.OperationContractAttribute(Action="MessageService/ITrafficMessage/MessagesAvailable", ReplyAction="MessageService/ITrafficMessage/MessagesAvailableResponse")]
        System.Threading.Tasks.Task<int> MessagesAvailableAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="MessageService/ITrafficMessage/WhatIsMyConnectionStatus", ReplyAction="MessageService/ITrafficMessage/WhatIsMyConnectionStatusResponse")]
        ITTF_Server.ClientStatus WhatIsMyConnectionStatus(ITTF_Server.ObjectType myType, string myName);
        
        [System.ServiceModel.OperationContractAttribute(Action="MessageService/ITrafficMessage/WhatIsMyConnectionStatus", ReplyAction="MessageService/ITrafficMessage/WhatIsMyConnectionStatusResponse")]
        System.Threading.Tasks.Task<ITTF_Server.ClientStatus> WhatIsMyConnectionStatusAsync(ITTF_Server.ObjectType myType, string myName);
        
        [System.ServiceModel.OperationContractAttribute(Action="MessageService/ITrafficMessage/Disconnect", ReplyAction="MessageService/ITrafficMessage/DisconnectResponse")]
        void Disconnect(ITTF_Server.ObjectType type, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="MessageService/ITrafficMessage/Disconnect", ReplyAction="MessageService/ITrafficMessage/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(ITTF_Server.ObjectType type, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="MessageService/ITrafficMessage/MyEndPoint", ReplyAction="MessageService/ITrafficMessage/MyEndPointResponse")]
        System.Net.IPEndPoint MyEndPoint();
        
        [System.ServiceModel.OperationContractAttribute(Action="MessageService/ITrafficMessage/MyEndPoint", ReplyAction="MessageService/ITrafficMessage/MyEndPointResponse")]
        System.Threading.Tasks.Task<System.Net.IPEndPoint> MyEndPointAsync();
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RetrieveMessage", WrapperNamespace="MessageService", IsWrapped=true)]
    public partial class RetrieveMessageRequest {
        
        public RetrieveMessageRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RetrieveMessageResponse", WrapperNamespace="MessageService", IsWrapped=true)]
    public partial class RetrieveMessageResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="MessageService", Order=0)]
        public bool RetrieveMessageResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="MessageService", Order=1)]
        public ITTF_Server.ServerMessage message;
        
        public RetrieveMessageResponse() {
        }
        
        public RetrieveMessageResponse(bool RetrieveMessageResult, ITTF_Server.ServerMessage message) {
            this.RetrieveMessageResult = RetrieveMessageResult;
            this.message = message;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RetrieveAllMessages", WrapperNamespace="MessageService", IsWrapped=true)]
    public partial class RetrieveAllMessagesRequest {
        
        public RetrieveAllMessagesRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RetrieveAllMessagesResponse", WrapperNamespace="MessageService", IsWrapped=true)]
    public partial class RetrieveAllMessagesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="MessageService", Order=0)]
        public bool RetrieveAllMessagesResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="MessageService", Order=1)]
        public ITTF_Server.ServerMessage[] messages;
        
        public RetrieveAllMessagesResponse() {
        }
        
        public RetrieveAllMessagesResponse(bool RetrieveAllMessagesResult, ITTF_Server.ServerMessage[] messages) {
            this.RetrieveAllMessagesResult = RetrieveAllMessagesResult;
            this.messages = messages;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITrafficMessageChannel : ITTF_TrainStation.TrafficMessage.ITrafficMessage, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TrafficMessageClient : System.ServiceModel.ClientBase<ITTF_TrainStation.TrafficMessage.ITrafficMessage>, ITTF_TrainStation.TrafficMessage.ITrafficMessage {
        
        public TrafficMessageClient() {
        }
        
        public TrafficMessageClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TrafficMessageClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TrafficMessageClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TrafficMessageClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.IPEndPoint ConnectMe(ITTF_Server.ObjectType myType, string myName) {
            return base.Channel.ConnectMe(myType, myName);
        }
        
        public System.Threading.Tasks.Task<System.Net.IPEndPoint> ConnectMeAsync(ITTF_Server.ObjectType myType, string myName) {
            return base.Channel.ConnectMeAsync(myType, myName);
        }
        
        public System.Net.IPEndPoint GetID(ITTF_Server.ObjectType type, string name) {
            return base.Channel.GetID(type, name);
        }
        
        public System.Threading.Tasks.Task<System.Net.IPEndPoint> GetIDAsync(ITTF_Server.ObjectType type, string name) {
            return base.Channel.GetIDAsync(type, name);
        }
        
        public bool SendMessage(ITTF_Server.ServerMessage message) {
            return base.Channel.SendMessage(message);
        }
        
        public System.Threading.Tasks.Task<bool> SendMessageAsync(ITTF_Server.ServerMessage message) {
            return base.Channel.SendMessageAsync(message);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ITTF_TrainStation.TrafficMessage.RetrieveMessageResponse ITTF_TrainStation.TrafficMessage.ITrafficMessage.RetrieveMessage(ITTF_TrainStation.TrafficMessage.RetrieveMessageRequest request) {
            return base.Channel.RetrieveMessage(request);
        }
        
        public bool RetrieveMessage(out ITTF_Server.ServerMessage message) {
            ITTF_TrainStation.TrafficMessage.RetrieveMessageRequest inValue = new ITTF_TrainStation.TrafficMessage.RetrieveMessageRequest();
            ITTF_TrainStation.TrafficMessage.RetrieveMessageResponse retVal = ((ITTF_TrainStation.TrafficMessage.ITrafficMessage)(this)).RetrieveMessage(inValue);
            message = retVal.message;
            return retVal.RetrieveMessageResult;
        }
        
        public System.Threading.Tasks.Task<ITTF_TrainStation.TrafficMessage.RetrieveMessageResponse> RetrieveMessageAsync(ITTF_TrainStation.TrafficMessage.RetrieveMessageRequest request) {
            return base.Channel.RetrieveMessageAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ITTF_TrainStation.TrafficMessage.RetrieveAllMessagesResponse ITTF_TrainStation.TrafficMessage.ITrafficMessage.RetrieveAllMessages(ITTF_TrainStation.TrafficMessage.RetrieveAllMessagesRequest request) {
            return base.Channel.RetrieveAllMessages(request);
        }
        
        public bool RetrieveAllMessages(out ITTF_Server.ServerMessage[] messages) {
            ITTF_TrainStation.TrafficMessage.RetrieveAllMessagesRequest inValue = new ITTF_TrainStation.TrafficMessage.RetrieveAllMessagesRequest();
            ITTF_TrainStation.TrafficMessage.RetrieveAllMessagesResponse retVal = ((ITTF_TrainStation.TrafficMessage.ITrafficMessage)(this)).RetrieveAllMessages(inValue);
            messages = retVal.messages;
            return retVal.RetrieveAllMessagesResult;
        }
        
        public System.Threading.Tasks.Task<ITTF_TrainStation.TrafficMessage.RetrieveAllMessagesResponse> RetrieveAllMessagesAsync(ITTF_TrainStation.TrafficMessage.RetrieveAllMessagesRequest request) {
            return base.Channel.RetrieveAllMessagesAsync(request);
        }
        
        public int MessagesAvailable() {
            return base.Channel.MessagesAvailable();
        }
        
        public System.Threading.Tasks.Task<int> MessagesAvailableAsync() {
            return base.Channel.MessagesAvailableAsync();
        }
        
        public ITTF_Server.ClientStatus WhatIsMyConnectionStatus(ITTF_Server.ObjectType myType, string myName) {
            return base.Channel.WhatIsMyConnectionStatus(myType, myName);
        }
        
        public System.Threading.Tasks.Task<ITTF_Server.ClientStatus> WhatIsMyConnectionStatusAsync(ITTF_Server.ObjectType myType, string myName) {
            return base.Channel.WhatIsMyConnectionStatusAsync(myType, myName);
        }
        
        public void Disconnect(ITTF_Server.ObjectType type, string name) {
            base.Channel.Disconnect(type, name);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(ITTF_Server.ObjectType type, string name) {
            return base.Channel.DisconnectAsync(type, name);
        }
        
        public System.Net.IPEndPoint MyEndPoint() {
            return base.Channel.MyEndPoint();
        }
        
        public System.Threading.Tasks.Task<System.Net.IPEndPoint> MyEndPointAsync() {
            return base.Channel.MyEndPointAsync();
        }
    }
}
